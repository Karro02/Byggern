
PingPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  00000f94  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800224  00800224  0000114c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc2  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7e  00000000  00000000  0000311e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb5  00000000  00000000  00003e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00004d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074f  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001425  00000000  00000000  000059ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00006e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e9       	ldi	r30, 0x94	; 148
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 32       	cpi	r26, 0x24	; 36
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a4 e2       	ldi	r26, 0x24	; 36
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 32       	cpi	r26, 0x2E	; 46
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  a6:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <SRAM_test>:
#include "oled.h"
#include "spi.h"
#include "fonts.h"

void SRAM_test(void)
{
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 29 03 	call	0x652	; 0x652 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
  c2:	0e 94 b8 02 	call	0x570	; 0x570 <rand>
  c6:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
  c8:	0e 94 bd 02 	call	0x57a	; 0x57a <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
  d4:	20 c0       	rjmp	.+64     	; 0x116 <SRAM_test+0x68>
		uint8_t some_value = rand();
  d6:	0e 94 b8 02 	call	0x570	; 0x570 <rand>
		ext_ram[i] = some_value;
  da:	fe 01       	movw	r30, r28
  dc:	f8 5e       	subi	r31, 0xE8	; 232
  de:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
  e0:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
  e2:	28 17       	cp	r18, r24
  e4:	b9 f0       	breq	.+46     	; 0x114 <SRAM_test+0x66>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  e6:	99 27       	eor	r25, r25
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	1f 92       	push	r1
  ee:	2f 93       	push	r18
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	80 e2       	ldi	r24, 0x20	; 32
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	9f 93       	push	r25
  fa:	8f 93       	push	r24
  fc:	0e 94 13 03 	call	0x626	; 0x626 <printf>
			write_errors++;
 100:	0f 5f       	subi	r16, 0xFF	; 255
 102:	1f 4f       	sbci	r17, 0xFF	; 255
 104:	8d b7       	in	r24, 0x3d	; 61
 106:	9e b7       	in	r25, 0x3e	; 62
 108:	08 96       	adiw	r24, 0x08	; 8
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	9e bf       	out	0x3e, r25	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c1 15       	cp	r28, r1
 118:	98 e0       	ldi	r25, 0x08	; 8
 11a:	d9 07       	cpc	r29, r25
 11c:	e0 f2       	brcs	.-72     	; 0xd6 <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 11e:	c7 01       	movw	r24, r14
 120:	0e 94 bd 02 	call	0x57a	; 0x57a <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 128:	e1 2c       	mov	r14, r1
 12a:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 12c:	20 c0       	rjmp	.+64     	; 0x16e <SRAM_test+0xc0>
		uint8_t some_value = rand();
 12e:	0e 94 b8 02 	call	0x570	; 0x570 <rand>
		uint8_t retreived_value = ext_ram[i];
 132:	fe 01       	movw	r30, r28
 134:	f8 5e       	subi	r31, 0xE8	; 232
 136:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 138:	28 17       	cp	r18, r24
 13a:	c1 f0       	breq	.+48     	; 0x16c <SRAM_test+0xbe>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 13c:	99 27       	eor	r25, r25
 13e:	9f 93       	push	r25
 140:	8f 93       	push	r24
 142:	1f 92       	push	r1
 144:	2f 93       	push	r18
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	89 e5       	ldi	r24, 0x59	; 89
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	9f 93       	push	r25
 150:	8f 93       	push	r24
 152:	0e 94 13 03 	call	0x626	; 0x626 <printf>
			retrieval_errors++;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	e8 1a       	sub	r14, r24
 15a:	f8 0a       	sbc	r15, r24
 15c:	8d b7       	in	r24, 0x3d	; 61
 15e:	9e b7       	in	r25, 0x3e	; 62
 160:	08 96       	adiw	r24, 0x08	; 8
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	9e bf       	out	0x3e, r25	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	c1 15       	cp	r28, r1
 170:	98 e0       	ldi	r25, 0x08	; 8
 172:	d9 07       	cpc	r29, r25
 174:	e0 f2       	brcs	.-72     	; 0x12e <SRAM_test+0x80>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 176:	ff 92       	push	r15
 178:	ef 92       	push	r14
 17a:	1f 93       	push	r17
 17c:	0f 93       	push	r16
 17e:	86 e9       	ldi	r24, 0x96	; 150
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	0e 94 13 03 	call	0x626	; 0x626 <printf>
}
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <main>:

int main(void)
{	
	USART_Init(MYUBRR);
 1a4:	8f e1       	ldi	r24, 0x1F	; 31
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 b5 01 	call	0x36a	; 0x36a <USART_Init>
	printf_init();
 1ac:	0e 94 d6 01 	call	0x3ac	; 0x3ac <printf_init>
	printf("UART initialized!\n");
 1b0:	8f ee       	ldi	r24, 0xEF	; 239
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 29 03 	call	0x652	; 0x652 <puts>
	xmem_init();
 1b8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <xmem_init>
	printf("xmem initialized! \n");
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	0e 94 29 03 	call	0x652	; 0x652 <puts>
	OLED_init();
 1c4:	0e 94 39 01 	call	0x272	; 0x272 <OLED_init>
	SPI_MasterInit();
 1c8:	0e 94 aa 01 	call	0x354	; 0x354 <SPI_MasterInit>
	
	
	
	SRAM_test();
 1cc:	0e 94 57 00 	call	0xae	; 0xae <SRAM_test>
	
	uint32_t sleep = 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	dc 01       	movw	r26, r24
	while(sleep < 100000) {
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <main+0x3a>
		sleep++;
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	a1 1d       	adc	r26, r1
 1dc:	b1 1d       	adc	r27, r1
	
	
	SRAM_test();
	
	uint32_t sleep = 0;
	while(sleep < 100000) {
 1de:	80 3a       	cpi	r24, 0xA0	; 160
 1e0:	26 e8       	ldi	r18, 0x86	; 134
 1e2:	92 07       	cpc	r25, r18
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	a2 07       	cpc	r26, r18
 1e8:	b1 05       	cpc	r27, r1
 1ea:	b0 f3       	brcs	.-20     	; 0x1d8 <main+0x34>
		sleep++;
	}
	sleep = 0;
	signedPos offset = get_stick_offset();
 1ec:	0e 94 45 02 	call	0x48a	; 0x48a <get_stick_offset>
	printf("X: %4d Y: %4d \n", offset.X, offset.Y);
 1f0:	9f 93       	push	r25
 1f2:	8f 93       	push	r24
 1f4:	7f 93       	push	r23
 1f6:	6f 93       	push	r22
 1f8:	84 e1       	ldi	r24, 0x14	; 20
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	9f 93       	push	r25
 1fe:	8f 93       	push	r24
 200:	0e 94 13 03 	call	0x626	; 0x626 <printf>
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
	while(1)
	{
	SPI_MasterTransmit(0b00000011);		
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	0e 94 b1 01 	call	0x362	; 0x362 <SPI_MasterTransmit>
 216:	fc cf       	rjmp	.-8      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>

00000218 <OLED_clear>:
	xmem_write(0xaf, COMMAND_OFFSET); // display on
	
	OLED_clear();
}

void OLED_clear() {
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
	
	for (int i = 0; i < 8; i++) {
 220:	00 e0       	ldi	r16, 0x00	; 0
 222:	10 e0       	ldi	r17, 0x00	; 0
 224:	1e c0       	rjmp	.+60     	; 0x262 <OLED_clear+0x4a>
		xmem_write(0xb0 + i, COMMAND_OFFSET);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	80 eb       	ldi	r24, 0xB0	; 176
 22c:	80 0f       	add	r24, r16
 22e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
		xmem_write(0x00, COMMAND_OFFSET);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
		xmem_write(0x10, COMMAND_OFFSET);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
		for (int j = 0; j < 128; j++) {
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	06 c0       	rjmp	.+12     	; 0x258 <OLED_clear+0x40>
			xmem_write(0x00, DATA_OFFSET);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	72 e0       	ldi	r23, 0x02	; 2
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	
	for (int i = 0; i < 8; i++) {
		xmem_write(0xb0 + i, COMMAND_OFFSET);
		xmem_write(0x00, COMMAND_OFFSET);
		xmem_write(0x10, COMMAND_OFFSET);
		for (int j = 0; j < 128; j++) {
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	c0 38       	cpi	r28, 0x80	; 128
 25a:	d1 05       	cpc	r29, r1
 25c:	bc f3       	brlt	.-18     	; 0x24c <OLED_clear+0x34>
	OLED_clear();
}

void OLED_clear() {
	
	for (int i = 0; i < 8; i++) {
 25e:	0f 5f       	subi	r16, 0xFF	; 255
 260:	1f 4f       	sbci	r17, 0xFF	; 255
 262:	08 30       	cpi	r16, 0x08	; 8
 264:	11 05       	cpc	r17, r1
 266:	fc f2       	brlt	.-66     	; 0x226 <OLED_clear+0xe>
		for (int j = 0; j < 128; j++) {
			xmem_write(0x00, DATA_OFFSET);
		}
	}
	
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	08 95       	ret

00000272 <OLED_init>:
#include "oled.h"
#include "fonts.h"

void OLED_init() {
	xmem_write(0xae, COMMAND_OFFSET); // display off
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	8e ea       	ldi	r24, 0xAE	; 174
 278:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xa1, COMMAND_OFFSET); //segment remap
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	81 ea       	ldi	r24, 0xA1	; 161
 282:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xda, COMMAND_OFFSET); //common pads hardware: alternative
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	8a ed       	ldi	r24, 0xDA	; 218
 28c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x12, COMMAND_OFFSET);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	82 e1       	ldi	r24, 0x12	; 18
 296:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xc8, COMMAND_OFFSET); //common output scan direction:com63~com0
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	88 ec       	ldi	r24, 0xC8	; 200
 2a0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xa8, COMMAND_OFFSET); //multiplex ration mode:63
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	88 ea       	ldi	r24, 0xA8	; 168
 2aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x3f, COMMAND_OFFSET);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xd5, COMMAND_OFFSET); //display divide ratio/osc. freq. mode
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	85 ed       	ldi	r24, 0xD5	; 213
 2be:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x80, COMMAND_OFFSET);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x81, COMMAND_OFFSET); //contrast control
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	81 e8       	ldi	r24, 0x81	; 129
 2d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x50, COMMAND_OFFSET);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	80 e5       	ldi	r24, 0x50	; 80
 2dc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xd9, COMMAND_OFFSET); //set pre-charge period
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	89 ed       	ldi	r24, 0xD9	; 217
 2e6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x21, COMMAND_OFFSET);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	81 e2       	ldi	r24, 0x21	; 33
 2f0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x20, COMMAND_OFFSET); //Set Memory Addressing Mode
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	80 e2       	ldi	r24, 0x20	; 32
 2fa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x02, COMMAND_OFFSET);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xdb, COMMAND_OFFSET); //VCOM deselect level mode
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	8b ed       	ldi	r24, 0xDB	; 219
 30e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x30, COMMAND_OFFSET);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xad, COMMAND_OFFSET); //master configuration
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	8d ea       	ldi	r24, 0xAD	; 173
 322:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0x00, COMMAND_OFFSET);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xa4, COMMAND_OFFSET); //out follows RAM content
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	84 ea       	ldi	r24, 0xA4	; 164
 336:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xa6, COMMAND_OFFSET); //set normal display
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	86 ea       	ldi	r24, 0xA6	; 166
 340:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	xmem_write(0xaf, COMMAND_OFFSET); // display on
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	8f ea       	ldi	r24, 0xAF	; 175
 34a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	
	OLED_clear();
 34e:	0e 94 0c 01 	call	0x218	; 0x218 <OLED_clear>
 352:	08 95       	ret

00000354 <SPI_MasterInit>:

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	//DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK);
	DDRB |= (1 << PB5) | (1 << PB7); //(1<<DDB5)|(1<<DDB7);
 354:	87 b3       	in	r24, 0x17	; 23
 356:	80 6a       	ori	r24, 0xA0	; 160
 358:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<SPR0); //|(1<<CPOL);
 35a:	8d b1       	in	r24, 0x0d	; 13
 35c:	80 65       	ori	r24, 0x50	; 80
 35e:	8d b9       	out	0x0d, r24	; 13
 360:	08 95       	ret

00000362 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 362:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 364:	77 9b       	sbis	0x0e, 7	; 14
 366:	fe cf       	rjmp	.-4      	; 0x364 <SPI_MasterTransmit+0x2>
	;
}
 368:	08 95       	ret

0000036a <USART_Init>:
#include <avr/io.h>


void USART_Init(unsigned int ubrr) { //For uart0
	//set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 36a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 36c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 36e:	88 e1       	ldi	r24, 0x18	; 24
 370:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(0<<USBS0)|(3<<UCSZ00);
 372:	86 e8       	ldi	r24, 0x86	; 134
 374:	80 bd       	out	0x20, r24	; 32
 376:	08 95       	ret

00000378 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 378:	5d 9b       	sbis	0x0b, 5	; 11
 37a:	fe cf       	rjmp	.-4      	; 0x378 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 37c:	8c b9       	out	0x0c, r24	; 12
 37e:	08 95       	ret

00000380 <uart_putchar>:
	/* Get and return received data from buffer */
	return UDR0;
}
//Maybe implement if else to return only the thing in the register

int uart_putchar(char c, FILE *stream) {
 380:	cf 93       	push	r28
 382:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 384:	8a 30       	cpi	r24, 0x0A	; 10
 386:	19 f4       	brne	.+6      	; 0x38e <uart_putchar+0xe>
		USART_Transmit('\r');  // Send carriage return before newline
 388:	8d e0       	ldi	r24, 0x0D	; 13
 38a:	0e 94 bc 01 	call	0x378	; 0x378 <USART_Transmit>
	}
	USART_Transmit(c);
 38e:	8c 2f       	mov	r24, r28
 390:	0e 94 bc 01 	call	0x378	; 0x378 <USART_Transmit>
	return 0;
}
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 39c:	5f 9b       	sbis	0x0b, 7	; 11
 39e:	fe cf       	rjmp	.-4      	; 0x39c <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
 3a0:	8c b1       	in	r24, 0x0c	; 12
}
 3a2:	08 95       	ret

000003a4 <uart_getchar>:
	return 0;
}

// Custom receive function (optional, for scanf or similar)
int uart_getchar(FILE *stream) {
	return USART_Receive();
 3a4:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_Receive>
}
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret

000003ac <printf_init>:

void printf_init() {
	fdevopen(uart_putchar, uart_getchar); //kan trenge referanse til funksjonen
 3ac:	62 ed       	ldi	r22, 0xD2	; 210
 3ae:	71 e0       	ldi	r23, 0x01	; 1
 3b0:	80 ec       	ldi	r24, 0xC0	; 192
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 c8 02 	call	0x590	; 0x590 <fdevopen>
 3b8:	08 95       	ret

000003ba <xmem_init>:
#include <avr/io.h>


void xmem_init() {
	//SRAM
	MCUCR |= 1 << SRE; // enable external memory interface
 3ba:	85 b7       	in	r24, 0x35	; 53
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	85 bf       	out	0x35, r24	; 53
	SFIOR &= ~(1 << XMM1 | 1 << XMM0); //setting XMM1 and XMM0 to 0 Worked with XMM2 instead of XMM0
 3c0:	80 b7       	in	r24, 0x30	; 48
 3c2:	87 7e       	andi	r24, 0xE7	; 231
 3c4:	80 bf       	out	0x30, r24	; 48
	SFIOR |= 1 << XMM2; // masking out the bits that JTAG uses Set other ones to 0
 3c6:	80 b7       	in	r24, 0x30	; 48
 3c8:	80 62       	ori	r24, 0x20	; 32
 3ca:	80 bf       	out	0x30, r24	; 48
	
	// ADC
	DDRD = 1 << DDD4; // set PD4 as PWM clock signal
 3cc:	80 e1       	ldi	r24, 0x10	; 16
 3ce:	81 bb       	out	0x11, r24	; 17
	TCCR3A |=  1 << WGM30 | 0 << WGM31 | 0 << COM3A0 | 1 << COM3A1;
 3d0:	eb e8       	ldi	r30, 0x8B	; 139
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	81 68       	ori	r24, 0x81	; 129
 3d8:	80 83       	st	Z, r24
	TCCR3B |= 1 << WGM32 | 0 << ICES3 | 1 << CS30;
 3da:	ea e8       	ldi	r30, 0x8A	; 138
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	89 60       	ori	r24, 0x09	; 9
 3e2:	80 83       	st	Z, r24
	
	
	//Buttons
	DDRB |= 0 << DDB2 | 0 << DDB1 | 0 << DDB0; 
 3e4:	87 b3       	in	r24, 0x17	; 23
 3e6:	87 bb       	out	0x17, r24	; 23
	PORTB |= 1 << PB1;
 3e8:	88 b3       	in	r24, 0x18	; 24
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	88 bb       	out	0x18, r24	; 24
 3ee:	08 95       	ret

000003f0 <xmem_write>:

}

void xmem_write ( uint8_t data , uint16_t addr ) {
	volatile char * ext_mem = ( char *) BASE_ADDRESS ;
	ext_mem [ addr ]= data ;
 3f0:	fb 01       	movw	r30, r22
 3f2:	f0 5f       	subi	r31, 0xF0	; 240
 3f4:	80 83       	st	Z, r24
 3f6:	08 95       	ret

000003f8 <xmem_read>:
}

uint8_t xmem_read ( uint16_t addr ) {
	volatile char * ext_mem = ( char *) BASE_ADDRESS ;
	uint8_t ret_val = ext_mem [ addr ];
 3f8:	90 5f       	subi	r25, 0xF0	; 240
 3fa:	fc 01       	movw	r30, r24
 3fc:	80 81       	ld	r24, Z
	return ret_val ;
}
 3fe:	08 95       	ret

00000400 <get_board_data>:
	
	

joystickAndSliderPos get_board_data() {
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	60 97       	sbiw	r28, 0x10	; 16
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
	xmem_write(1, ADC_OFFSET);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	74 e0       	ldi	r23, 0x04	; 4
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <xmem_write>
	joystickAndSliderPos data;
	data.L_slider = (int16_t) xmem_read(ADC_OFFSET);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	94 e0       	ldi	r25, 0x04	; 4
 422:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <xmem_read>
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	9e 87       	std	Y+14, r25	; 0x0e
 42a:	8d 87       	std	Y+13, r24	; 0x0d
	data.Y_joystick =  (int16_t) xmem_read(ADC_OFFSET);
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	94 e0       	ldi	r25, 0x04	; 4
 430:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <xmem_read>
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	9c 87       	std	Y+12, r25	; 0x0c
 438:	8b 87       	std	Y+11, r24	; 0x0b
	data.X_joystick = (int16_t) xmem_read(ADC_OFFSET);
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	94 e0       	ldi	r25, 0x04	; 4
 43e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <xmem_read>
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	9a 87       	std	Y+10, r25	; 0x0a
 446:	89 87       	std	Y+9, r24	; 0x09
	data.R_slider = (int16_t) xmem_read(ADC_OFFSET);
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	94 e0       	ldi	r25, 0x04	; 4
 44c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <xmem_read>
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	98 8b       	std	Y+16, r25	; 0x10
 454:	8f 87       	std	Y+15, r24	; 0x0f
	return data;
 456:	88 e0       	ldi	r24, 0x08	; 8
 458:	fe 01       	movw	r30, r28
 45a:	39 96       	adiw	r30, 0x09	; 9
 45c:	de 01       	movw	r26, r28
 45e:	11 96       	adiw	r26, 0x01	; 1
 460:	01 90       	ld	r0, Z+
 462:	0d 92       	st	X+, r0
 464:	8a 95       	dec	r24
 466:	e1 f7       	brne	.-8      	; 0x460 <get_board_data+0x60>
 468:	29 81       	ldd	r18, Y+1	; 0x01
 46a:	3a 81       	ldd	r19, Y+2	; 0x02
 46c:	4b 81       	ldd	r20, Y+3	; 0x03
 46e:	5c 81       	ldd	r21, Y+4	; 0x04
 470:	6d 81       	ldd	r22, Y+5	; 0x05
 472:	7e 81       	ldd	r23, Y+6	; 0x06
}
 474:	8f 81       	ldd	r24, Y+7	; 0x07
 476:	98 85       	ldd	r25, Y+8	; 0x08
 478:	60 96       	adiw	r28, 0x10	; 16
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	de bf       	out	0x3e, r29	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	cd bf       	out	0x3d, r28	; 61
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <get_stick_offset>:

signedPos get_stick_offset() {
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	28 97       	sbiw	r28, 0x08	; 8
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
	signedPos Offset;
	joystickAndSliderPos data = get_board_data();
 49e:	0e 94 00 02 	call	0x400	; 0x400 <get_board_data>
 4a2:	29 83       	std	Y+1, r18	; 0x01
 4a4:	3a 83       	std	Y+2, r19	; 0x02
 4a6:	4b 83       	std	Y+3, r20	; 0x03
 4a8:	5c 83       	std	Y+4, r21	; 0x04
 4aa:	6d 83       	std	Y+5, r22	; 0x05
 4ac:	7e 83       	std	Y+6, r23	; 0x06
 4ae:	8f 83       	std	Y+7, r24	; 0x07
 4b0:	98 87       	std	Y+8, r25	; 0x08
	Offset.X = (int16_t) data.X_joystick - 128;
 4b2:	29 81       	ldd	r18, Y+1	; 0x01
 4b4:	3a 81       	ldd	r19, Y+2	; 0x02
 4b6:	b9 01       	movw	r22, r18
 4b8:	60 58       	subi	r22, 0x80	; 128
 4ba:	71 09       	sbc	r23, r1
	Offset.Y = (int16_t) data.Y_joystick - 128;
 4bc:	2b 81       	ldd	r18, Y+3	; 0x03
 4be:	3c 81       	ldd	r19, Y+4	; 0x04
 4c0:	c9 01       	movw	r24, r18
 4c2:	80 58       	subi	r24, 0x80	; 128
 4c4:	91 09       	sbc	r25, r1
	return Offset;
}
 4c6:	28 96       	adiw	r28, 0x08	; 8
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <do_rand>:
 4d8:	8f 92       	push	r8
 4da:	9f 92       	push	r9
 4dc:	af 92       	push	r10
 4de:	bf 92       	push	r11
 4e0:	cf 92       	push	r12
 4e2:	df 92       	push	r13
 4e4:	ef 92       	push	r14
 4e6:	ff 92       	push	r15
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	ec 01       	movw	r28, r24
 4ee:	68 81       	ld	r22, Y
 4f0:	79 81       	ldd	r23, Y+1	; 0x01
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	9b 81       	ldd	r25, Y+3	; 0x03
 4f6:	61 15       	cp	r22, r1
 4f8:	71 05       	cpc	r23, r1
 4fa:	81 05       	cpc	r24, r1
 4fc:	91 05       	cpc	r25, r1
 4fe:	21 f4       	brne	.+8      	; 0x508 <__stack+0x9>
 500:	64 e2       	ldi	r22, 0x24	; 36
 502:	79 ed       	ldi	r23, 0xD9	; 217
 504:	8b e5       	ldi	r24, 0x5B	; 91
 506:	97 e0       	ldi	r25, 0x07	; 7
 508:	2d e1       	ldi	r18, 0x1D	; 29
 50a:	33 ef       	ldi	r19, 0xF3	; 243
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodsi4>
 514:	49 01       	movw	r8, r18
 516:	5a 01       	movw	r10, r20
 518:	9b 01       	movw	r18, r22
 51a:	ac 01       	movw	r20, r24
 51c:	a7 ea       	ldi	r26, 0xA7	; 167
 51e:	b1 e4       	ldi	r27, 0x41	; 65
 520:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__muluhisi3>
 524:	6b 01       	movw	r12, r22
 526:	7c 01       	movw	r14, r24
 528:	ac ee       	ldi	r26, 0xEC	; 236
 52a:	b4 ef       	ldi	r27, 0xF4	; 244
 52c:	a5 01       	movw	r20, r10
 52e:	94 01       	movw	r18, r8
 530:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__mulohisi3>
 534:	dc 01       	movw	r26, r24
 536:	cb 01       	movw	r24, r22
 538:	8c 0d       	add	r24, r12
 53a:	9d 1d       	adc	r25, r13
 53c:	ae 1d       	adc	r26, r14
 53e:	bf 1d       	adc	r27, r15
 540:	b7 ff       	sbrs	r27, 7
 542:	03 c0       	rjmp	.+6      	; 0x54a <__stack+0x4b>
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	a1 09       	sbc	r26, r1
 548:	b0 48       	sbci	r27, 0x80	; 128
 54a:	88 83       	st	Y, r24
 54c:	99 83       	std	Y+1, r25	; 0x01
 54e:	aa 83       	std	Y+2, r26	; 0x02
 550:	bb 83       	std	Y+3, r27	; 0x03
 552:	9f 77       	andi	r25, 0x7F	; 127
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	bf 90       	pop	r11
 562:	af 90       	pop	r10
 564:	9f 90       	pop	r9
 566:	8f 90       	pop	r8
 568:	08 95       	ret

0000056a <rand_r>:
 56a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <do_rand>
 56e:	08 95       	ret

00000570 <rand>:
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <do_rand>
 578:	08 95       	ret

0000057a <srand>:
 57a:	a0 e0       	ldi	r26, 0x00	; 0
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 582:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 586:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 58a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 58e:	08 95       	ret

00000590 <fdevopen>:
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	31 f4       	brne	.+12     	; 0x5a8 <fdevopen+0x18>
 59c:	61 15       	cp	r22, r1
 59e:	71 05       	cpc	r23, r1
 5a0:	19 f4       	brne	.+6      	; 0x5a8 <fdevopen+0x18>
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	3a c0       	rjmp	.+116    	; 0x61c <fdevopen+0x8c>
 5a8:	8b 01       	movw	r16, r22
 5aa:	ec 01       	movw	r28, r24
 5ac:	6e e0       	ldi	r22, 0x0E	; 14
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 3a 05 	call	0xa74	; 0xa74 <calloc>
 5b8:	fc 01       	movw	r30, r24
 5ba:	89 2b       	or	r24, r25
 5bc:	91 f3       	breq	.-28     	; 0x5a2 <fdevopen+0x12>
 5be:	80 e8       	ldi	r24, 0x80	; 128
 5c0:	83 83       	std	Z+3, r24	; 0x03
 5c2:	01 15       	cp	r16, r1
 5c4:	11 05       	cpc	r17, r1
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <fdevopen+0x54>
 5c8:	13 87       	std	Z+11, r17	; 0x0b
 5ca:	02 87       	std	Z+10, r16	; 0x0a
 5cc:	81 e8       	ldi	r24, 0x81	; 129
 5ce:	83 83       	std	Z+3, r24	; 0x03
 5d0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 5d4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__data_end+0x1>
 5d8:	89 2b       	or	r24, r25
 5da:	21 f4       	brne	.+8      	; 0x5e4 <fdevopen+0x54>
 5dc:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <__data_end+0x1>
 5e0:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <__data_end>
 5e4:	20 97       	sbiw	r28, 0x00	; 0
 5e6:	c9 f0       	breq	.+50     	; 0x61a <fdevopen+0x8a>
 5e8:	d1 87       	std	Z+9, r29	; 0x09
 5ea:	c0 87       	std	Z+8, r28	; 0x08
 5ec:	83 81       	ldd	r24, Z+3	; 0x03
 5ee:	82 60       	ori	r24, 0x02	; 2
 5f0:	83 83       	std	Z+3, r24	; 0x03
 5f2:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end+0x2>
 5f6:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <__data_end+0x3>
 5fa:	89 2b       	or	r24, r25
 5fc:	71 f4       	brne	.+28     	; 0x61a <fdevopen+0x8a>
 5fe:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <__data_end+0x3>
 602:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <__data_end+0x2>
 606:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end+0x4>
 60a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x5>
 60e:	89 2b       	or	r24, r25
 610:	21 f4       	brne	.+8      	; 0x61a <fdevopen+0x8a>
 612:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <__data_end+0x5>
 616:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <__data_end+0x4>
 61a:	cf 01       	movw	r24, r30
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	08 95       	ret

00000626 <printf>:
 626:	a0 e0       	ldi	r26, 0x00	; 0
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e9 e1       	ldi	r30, 0x19	; 25
 62c:	f3 e0       	ldi	r31, 0x03	; 3
 62e:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__prologue_saves__+0x20>
 632:	ae 01       	movw	r20, r28
 634:	4b 5f       	subi	r20, 0xFB	; 251
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	fa 01       	movw	r30, r20
 63a:	61 91       	ld	r22, Z+
 63c:	71 91       	ld	r23, Z+
 63e:	af 01       	movw	r20, r30
 640:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end+0x2>
 644:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <__data_end+0x3>
 648:	0e 94 59 03 	call	0x6b2	; 0x6b2 <vfprintf>
 64c:	e2 e0       	ldi	r30, 0x02	; 2
 64e:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__epilogue_restores__+0x20>

00000652 <puts>:
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <__data_end+0x2>
 65e:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <__data_end+0x3>
 662:	23 81       	ldd	r18, Z+3	; 0x03
 664:	21 ff       	sbrs	r18, 1
 666:	1b c0       	rjmp	.+54     	; 0x69e <puts+0x4c>
 668:	8c 01       	movw	r16, r24
 66a:	d0 e0       	ldi	r29, 0x00	; 0
 66c:	c0 e0       	ldi	r28, 0x00	; 0
 66e:	f8 01       	movw	r30, r16
 670:	81 91       	ld	r24, Z+
 672:	8f 01       	movw	r16, r30
 674:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end+0x2>
 678:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <__data_end+0x3>
 67c:	db 01       	movw	r26, r22
 67e:	18 96       	adiw	r26, 0x08	; 8
 680:	ed 91       	ld	r30, X+
 682:	fc 91       	ld	r31, X
 684:	19 97       	sbiw	r26, 0x09	; 9
 686:	88 23       	and	r24, r24
 688:	31 f0       	breq	.+12     	; 0x696 <puts+0x44>
 68a:	09 95       	icall
 68c:	89 2b       	or	r24, r25
 68e:	79 f3       	breq	.-34     	; 0x66e <puts+0x1c>
 690:	df ef       	ldi	r29, 0xFF	; 255
 692:	cf ef       	ldi	r28, 0xFF	; 255
 694:	ec cf       	rjmp	.-40     	; 0x66e <puts+0x1c>
 696:	8a e0       	ldi	r24, 0x0A	; 10
 698:	09 95       	icall
 69a:	89 2b       	or	r24, r25
 69c:	19 f0       	breq	.+6      	; 0x6a4 <puts+0x52>
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	9f ef       	ldi	r25, 0xFF	; 255
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <puts+0x56>
 6a4:	8d 2f       	mov	r24, r29
 6a6:	9c 2f       	mov	r25, r28
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	08 95       	ret

000006b2 <vfprintf>:
 6b2:	ab e0       	ldi	r26, 0x0B	; 11
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	ef e5       	ldi	r30, 0x5F	; 95
 6b8:	f3 e0       	ldi	r31, 0x03	; 3
 6ba:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__prologue_saves__>
 6be:	6c 01       	movw	r12, r24
 6c0:	7b 01       	movw	r14, r22
 6c2:	8a 01       	movw	r16, r20
 6c4:	fc 01       	movw	r30, r24
 6c6:	17 82       	std	Z+7, r1	; 0x07
 6c8:	16 82       	std	Z+6, r1	; 0x06
 6ca:	83 81       	ldd	r24, Z+3	; 0x03
 6cc:	81 ff       	sbrs	r24, 1
 6ce:	cc c1       	rjmp	.+920    	; 0xa68 <vfprintf+0x3b6>
 6d0:	ce 01       	movw	r24, r28
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	3c 01       	movw	r6, r24
 6d6:	f6 01       	movw	r30, r12
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
 6da:	f7 01       	movw	r30, r14
 6dc:	93 fd       	sbrc	r25, 3
 6de:	85 91       	lpm	r24, Z+
 6e0:	93 ff       	sbrs	r25, 3
 6e2:	81 91       	ld	r24, Z+
 6e4:	7f 01       	movw	r14, r30
 6e6:	88 23       	and	r24, r24
 6e8:	09 f4       	brne	.+2      	; 0x6ec <vfprintf+0x3a>
 6ea:	ba c1       	rjmp	.+884    	; 0xa60 <vfprintf+0x3ae>
 6ec:	85 32       	cpi	r24, 0x25	; 37
 6ee:	39 f4       	brne	.+14     	; 0x6fe <vfprintf+0x4c>
 6f0:	93 fd       	sbrc	r25, 3
 6f2:	85 91       	lpm	r24, Z+
 6f4:	93 ff       	sbrs	r25, 3
 6f6:	81 91       	ld	r24, Z+
 6f8:	7f 01       	movw	r14, r30
 6fa:	85 32       	cpi	r24, 0x25	; 37
 6fc:	29 f4       	brne	.+10     	; 0x708 <vfprintf+0x56>
 6fe:	b6 01       	movw	r22, r12
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 706:	e7 cf       	rjmp	.-50     	; 0x6d6 <vfprintf+0x24>
 708:	91 2c       	mov	r9, r1
 70a:	21 2c       	mov	r2, r1
 70c:	31 2c       	mov	r3, r1
 70e:	ff e1       	ldi	r31, 0x1F	; 31
 710:	f3 15       	cp	r31, r3
 712:	d8 f0       	brcs	.+54     	; 0x74a <vfprintf+0x98>
 714:	8b 32       	cpi	r24, 0x2B	; 43
 716:	79 f0       	breq	.+30     	; 0x736 <vfprintf+0x84>
 718:	38 f4       	brcc	.+14     	; 0x728 <vfprintf+0x76>
 71a:	80 32       	cpi	r24, 0x20	; 32
 71c:	79 f0       	breq	.+30     	; 0x73c <vfprintf+0x8a>
 71e:	83 32       	cpi	r24, 0x23	; 35
 720:	a1 f4       	brne	.+40     	; 0x74a <vfprintf+0x98>
 722:	23 2d       	mov	r18, r3
 724:	20 61       	ori	r18, 0x10	; 16
 726:	1d c0       	rjmp	.+58     	; 0x762 <vfprintf+0xb0>
 728:	8d 32       	cpi	r24, 0x2D	; 45
 72a:	61 f0       	breq	.+24     	; 0x744 <vfprintf+0x92>
 72c:	80 33       	cpi	r24, 0x30	; 48
 72e:	69 f4       	brne	.+26     	; 0x74a <vfprintf+0x98>
 730:	23 2d       	mov	r18, r3
 732:	21 60       	ori	r18, 0x01	; 1
 734:	16 c0       	rjmp	.+44     	; 0x762 <vfprintf+0xb0>
 736:	83 2d       	mov	r24, r3
 738:	82 60       	ori	r24, 0x02	; 2
 73a:	38 2e       	mov	r3, r24
 73c:	e3 2d       	mov	r30, r3
 73e:	e4 60       	ori	r30, 0x04	; 4
 740:	3e 2e       	mov	r3, r30
 742:	2a c0       	rjmp	.+84     	; 0x798 <vfprintf+0xe6>
 744:	f3 2d       	mov	r31, r3
 746:	f8 60       	ori	r31, 0x08	; 8
 748:	1d c0       	rjmp	.+58     	; 0x784 <vfprintf+0xd2>
 74a:	37 fc       	sbrc	r3, 7
 74c:	2d c0       	rjmp	.+90     	; 0x7a8 <vfprintf+0xf6>
 74e:	20 ed       	ldi	r18, 0xD0	; 208
 750:	28 0f       	add	r18, r24
 752:	2a 30       	cpi	r18, 0x0A	; 10
 754:	40 f0       	brcs	.+16     	; 0x766 <vfprintf+0xb4>
 756:	8e 32       	cpi	r24, 0x2E	; 46
 758:	b9 f4       	brne	.+46     	; 0x788 <vfprintf+0xd6>
 75a:	36 fc       	sbrc	r3, 6
 75c:	81 c1       	rjmp	.+770    	; 0xa60 <vfprintf+0x3ae>
 75e:	23 2d       	mov	r18, r3
 760:	20 64       	ori	r18, 0x40	; 64
 762:	32 2e       	mov	r3, r18
 764:	19 c0       	rjmp	.+50     	; 0x798 <vfprintf+0xe6>
 766:	36 fe       	sbrs	r3, 6
 768:	06 c0       	rjmp	.+12     	; 0x776 <vfprintf+0xc4>
 76a:	8a e0       	ldi	r24, 0x0A	; 10
 76c:	98 9e       	mul	r9, r24
 76e:	20 0d       	add	r18, r0
 770:	11 24       	eor	r1, r1
 772:	92 2e       	mov	r9, r18
 774:	11 c0       	rjmp	.+34     	; 0x798 <vfprintf+0xe6>
 776:	ea e0       	ldi	r30, 0x0A	; 10
 778:	2e 9e       	mul	r2, r30
 77a:	20 0d       	add	r18, r0
 77c:	11 24       	eor	r1, r1
 77e:	22 2e       	mov	r2, r18
 780:	f3 2d       	mov	r31, r3
 782:	f0 62       	ori	r31, 0x20	; 32
 784:	3f 2e       	mov	r3, r31
 786:	08 c0       	rjmp	.+16     	; 0x798 <vfprintf+0xe6>
 788:	8c 36       	cpi	r24, 0x6C	; 108
 78a:	21 f4       	brne	.+8      	; 0x794 <vfprintf+0xe2>
 78c:	83 2d       	mov	r24, r3
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	38 2e       	mov	r3, r24
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0xe6>
 794:	88 36       	cpi	r24, 0x68	; 104
 796:	41 f4       	brne	.+16     	; 0x7a8 <vfprintf+0xf6>
 798:	f7 01       	movw	r30, r14
 79a:	93 fd       	sbrc	r25, 3
 79c:	85 91       	lpm	r24, Z+
 79e:	93 ff       	sbrs	r25, 3
 7a0:	81 91       	ld	r24, Z+
 7a2:	7f 01       	movw	r14, r30
 7a4:	81 11       	cpse	r24, r1
 7a6:	b3 cf       	rjmp	.-154    	; 0x70e <vfprintf+0x5c>
 7a8:	98 2f       	mov	r25, r24
 7aa:	9f 7d       	andi	r25, 0xDF	; 223
 7ac:	95 54       	subi	r25, 0x45	; 69
 7ae:	93 30       	cpi	r25, 0x03	; 3
 7b0:	28 f4       	brcc	.+10     	; 0x7bc <vfprintf+0x10a>
 7b2:	0c 5f       	subi	r16, 0xFC	; 252
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	9f e3       	ldi	r25, 0x3F	; 63
 7b8:	99 83       	std	Y+1, r25	; 0x01
 7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <vfprintf+0x124>
 7bc:	83 36       	cpi	r24, 0x63	; 99
 7be:	31 f0       	breq	.+12     	; 0x7cc <vfprintf+0x11a>
 7c0:	83 37       	cpi	r24, 0x73	; 115
 7c2:	71 f0       	breq	.+28     	; 0x7e0 <vfprintf+0x12e>
 7c4:	83 35       	cpi	r24, 0x53	; 83
 7c6:	09 f0       	breq	.+2      	; 0x7ca <vfprintf+0x118>
 7c8:	59 c0       	rjmp	.+178    	; 0x87c <vfprintf+0x1ca>
 7ca:	21 c0       	rjmp	.+66     	; 0x80e <vfprintf+0x15c>
 7cc:	f8 01       	movw	r30, r16
 7ce:	80 81       	ld	r24, Z
 7d0:	89 83       	std	Y+1, r24	; 0x01
 7d2:	0e 5f       	subi	r16, 0xFE	; 254
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	88 24       	eor	r8, r8
 7d8:	83 94       	inc	r8
 7da:	91 2c       	mov	r9, r1
 7dc:	53 01       	movw	r10, r6
 7de:	13 c0       	rjmp	.+38     	; 0x806 <vfprintf+0x154>
 7e0:	28 01       	movw	r4, r16
 7e2:	f2 e0       	ldi	r31, 0x02	; 2
 7e4:	4f 0e       	add	r4, r31
 7e6:	51 1c       	adc	r5, r1
 7e8:	f8 01       	movw	r30, r16
 7ea:	a0 80       	ld	r10, Z
 7ec:	b1 80       	ldd	r11, Z+1	; 0x01
 7ee:	36 fe       	sbrs	r3, 6
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x146>
 7f2:	69 2d       	mov	r22, r9
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x14a>
 7f8:	6f ef       	ldi	r22, 0xFF	; 255
 7fa:	7f ef       	ldi	r23, 0xFF	; 255
 7fc:	c5 01       	movw	r24, r10
 7fe:	0e 94 89 06 	call	0xd12	; 0xd12 <strnlen>
 802:	4c 01       	movw	r8, r24
 804:	82 01       	movw	r16, r4
 806:	f3 2d       	mov	r31, r3
 808:	ff 77       	andi	r31, 0x7F	; 127
 80a:	3f 2e       	mov	r3, r31
 80c:	16 c0       	rjmp	.+44     	; 0x83a <vfprintf+0x188>
 80e:	28 01       	movw	r4, r16
 810:	22 e0       	ldi	r18, 0x02	; 2
 812:	42 0e       	add	r4, r18
 814:	51 1c       	adc	r5, r1
 816:	f8 01       	movw	r30, r16
 818:	a0 80       	ld	r10, Z
 81a:	b1 80       	ldd	r11, Z+1	; 0x01
 81c:	36 fe       	sbrs	r3, 6
 81e:	03 c0       	rjmp	.+6      	; 0x826 <vfprintf+0x174>
 820:	69 2d       	mov	r22, r9
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <vfprintf+0x178>
 826:	6f ef       	ldi	r22, 0xFF	; 255
 828:	7f ef       	ldi	r23, 0xFF	; 255
 82a:	c5 01       	movw	r24, r10
 82c:	0e 94 77 06 	call	0xcee	; 0xcee <strnlen_P>
 830:	4c 01       	movw	r8, r24
 832:	f3 2d       	mov	r31, r3
 834:	f0 68       	ori	r31, 0x80	; 128
 836:	3f 2e       	mov	r3, r31
 838:	82 01       	movw	r16, r4
 83a:	33 fc       	sbrc	r3, 3
 83c:	1b c0       	rjmp	.+54     	; 0x874 <vfprintf+0x1c2>
 83e:	82 2d       	mov	r24, r2
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	88 16       	cp	r8, r24
 844:	99 06       	cpc	r9, r25
 846:	b0 f4       	brcc	.+44     	; 0x874 <vfprintf+0x1c2>
 848:	b6 01       	movw	r22, r12
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 852:	2a 94       	dec	r2
 854:	f4 cf       	rjmp	.-24     	; 0x83e <vfprintf+0x18c>
 856:	f5 01       	movw	r30, r10
 858:	37 fc       	sbrc	r3, 7
 85a:	85 91       	lpm	r24, Z+
 85c:	37 fe       	sbrs	r3, 7
 85e:	81 91       	ld	r24, Z+
 860:	5f 01       	movw	r10, r30
 862:	b6 01       	movw	r22, r12
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 86a:	21 10       	cpse	r2, r1
 86c:	2a 94       	dec	r2
 86e:	21 e0       	ldi	r18, 0x01	; 1
 870:	82 1a       	sub	r8, r18
 872:	91 08       	sbc	r9, r1
 874:	81 14       	cp	r8, r1
 876:	91 04       	cpc	r9, r1
 878:	71 f7       	brne	.-36     	; 0x856 <vfprintf+0x1a4>
 87a:	e8 c0       	rjmp	.+464    	; 0xa4c <vfprintf+0x39a>
 87c:	84 36       	cpi	r24, 0x64	; 100
 87e:	11 f0       	breq	.+4      	; 0x884 <vfprintf+0x1d2>
 880:	89 36       	cpi	r24, 0x69	; 105
 882:	41 f5       	brne	.+80     	; 0x8d4 <vfprintf+0x222>
 884:	f8 01       	movw	r30, r16
 886:	37 fe       	sbrs	r3, 7
 888:	07 c0       	rjmp	.+14     	; 0x898 <vfprintf+0x1e6>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	82 81       	ldd	r24, Z+2	; 0x02
 890:	93 81       	ldd	r25, Z+3	; 0x03
 892:	0c 5f       	subi	r16, 0xFC	; 252
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <vfprintf+0x1f6>
 898:	60 81       	ld	r22, Z
 89a:	71 81       	ldd	r23, Z+1	; 0x01
 89c:	07 2e       	mov	r0, r23
 89e:	00 0c       	add	r0, r0
 8a0:	88 0b       	sbc	r24, r24
 8a2:	99 0b       	sbc	r25, r25
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	f3 2d       	mov	r31, r3
 8aa:	ff 76       	andi	r31, 0x6F	; 111
 8ac:	3f 2e       	mov	r3, r31
 8ae:	97 ff       	sbrs	r25, 7
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <vfprintf+0x212>
 8b2:	90 95       	com	r25
 8b4:	80 95       	com	r24
 8b6:	70 95       	com	r23
 8b8:	61 95       	neg	r22
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	f0 68       	ori	r31, 0x80	; 128
 8c2:	3f 2e       	mov	r3, r31
 8c4:	2a e0       	ldi	r18, 0x0A	; 10
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	a3 01       	movw	r20, r6
 8ca:	0e 94 d0 06 	call	0xda0	; 0xda0 <__ultoa_invert>
 8ce:	88 2e       	mov	r8, r24
 8d0:	86 18       	sub	r8, r6
 8d2:	45 c0       	rjmp	.+138    	; 0x95e <vfprintf+0x2ac>
 8d4:	85 37       	cpi	r24, 0x75	; 117
 8d6:	31 f4       	brne	.+12     	; 0x8e4 <vfprintf+0x232>
 8d8:	23 2d       	mov	r18, r3
 8da:	2f 7e       	andi	r18, 0xEF	; 239
 8dc:	b2 2e       	mov	r11, r18
 8de:	2a e0       	ldi	r18, 0x0A	; 10
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	25 c0       	rjmp	.+74     	; 0x92e <vfprintf+0x27c>
 8e4:	93 2d       	mov	r25, r3
 8e6:	99 7f       	andi	r25, 0xF9	; 249
 8e8:	b9 2e       	mov	r11, r25
 8ea:	8f 36       	cpi	r24, 0x6F	; 111
 8ec:	c1 f0       	breq	.+48     	; 0x91e <vfprintf+0x26c>
 8ee:	18 f4       	brcc	.+6      	; 0x8f6 <vfprintf+0x244>
 8f0:	88 35       	cpi	r24, 0x58	; 88
 8f2:	79 f0       	breq	.+30     	; 0x912 <vfprintf+0x260>
 8f4:	b5 c0       	rjmp	.+362    	; 0xa60 <vfprintf+0x3ae>
 8f6:	80 37       	cpi	r24, 0x70	; 112
 8f8:	19 f0       	breq	.+6      	; 0x900 <vfprintf+0x24e>
 8fa:	88 37       	cpi	r24, 0x78	; 120
 8fc:	21 f0       	breq	.+8      	; 0x906 <vfprintf+0x254>
 8fe:	b0 c0       	rjmp	.+352    	; 0xa60 <vfprintf+0x3ae>
 900:	e9 2f       	mov	r30, r25
 902:	e0 61       	ori	r30, 0x10	; 16
 904:	be 2e       	mov	r11, r30
 906:	b4 fe       	sbrs	r11, 4
 908:	0d c0       	rjmp	.+26     	; 0x924 <vfprintf+0x272>
 90a:	fb 2d       	mov	r31, r11
 90c:	f4 60       	ori	r31, 0x04	; 4
 90e:	bf 2e       	mov	r11, r31
 910:	09 c0       	rjmp	.+18     	; 0x924 <vfprintf+0x272>
 912:	34 fe       	sbrs	r3, 4
 914:	0a c0       	rjmp	.+20     	; 0x92a <vfprintf+0x278>
 916:	29 2f       	mov	r18, r25
 918:	26 60       	ori	r18, 0x06	; 6
 91a:	b2 2e       	mov	r11, r18
 91c:	06 c0       	rjmp	.+12     	; 0x92a <vfprintf+0x278>
 91e:	28 e0       	ldi	r18, 0x08	; 8
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	05 c0       	rjmp	.+10     	; 0x92e <vfprintf+0x27c>
 924:	20 e1       	ldi	r18, 0x10	; 16
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <vfprintf+0x27c>
 92a:	20 e1       	ldi	r18, 0x10	; 16
 92c:	32 e0       	ldi	r19, 0x02	; 2
 92e:	f8 01       	movw	r30, r16
 930:	b7 fe       	sbrs	r11, 7
 932:	07 c0       	rjmp	.+14     	; 0x942 <vfprintf+0x290>
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	82 81       	ldd	r24, Z+2	; 0x02
 93a:	93 81       	ldd	r25, Z+3	; 0x03
 93c:	0c 5f       	subi	r16, 0xFC	; 252
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	06 c0       	rjmp	.+12     	; 0x94e <vfprintf+0x29c>
 942:	60 81       	ld	r22, Z
 944:	71 81       	ldd	r23, Z+1	; 0x01
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 5f       	subi	r16, 0xFE	; 254
 94c:	1f 4f       	sbci	r17, 0xFF	; 255
 94e:	a3 01       	movw	r20, r6
 950:	0e 94 d0 06 	call	0xda0	; 0xda0 <__ultoa_invert>
 954:	88 2e       	mov	r8, r24
 956:	86 18       	sub	r8, r6
 958:	fb 2d       	mov	r31, r11
 95a:	ff 77       	andi	r31, 0x7F	; 127
 95c:	3f 2e       	mov	r3, r31
 95e:	36 fe       	sbrs	r3, 6
 960:	0d c0       	rjmp	.+26     	; 0x97c <vfprintf+0x2ca>
 962:	23 2d       	mov	r18, r3
 964:	2e 7f       	andi	r18, 0xFE	; 254
 966:	a2 2e       	mov	r10, r18
 968:	89 14       	cp	r8, r9
 96a:	58 f4       	brcc	.+22     	; 0x982 <vfprintf+0x2d0>
 96c:	34 fe       	sbrs	r3, 4
 96e:	0b c0       	rjmp	.+22     	; 0x986 <vfprintf+0x2d4>
 970:	32 fc       	sbrc	r3, 2
 972:	09 c0       	rjmp	.+18     	; 0x986 <vfprintf+0x2d4>
 974:	83 2d       	mov	r24, r3
 976:	8e 7e       	andi	r24, 0xEE	; 238
 978:	a8 2e       	mov	r10, r24
 97a:	05 c0       	rjmp	.+10     	; 0x986 <vfprintf+0x2d4>
 97c:	b8 2c       	mov	r11, r8
 97e:	a3 2c       	mov	r10, r3
 980:	03 c0       	rjmp	.+6      	; 0x988 <vfprintf+0x2d6>
 982:	b8 2c       	mov	r11, r8
 984:	01 c0       	rjmp	.+2      	; 0x988 <vfprintf+0x2d6>
 986:	b9 2c       	mov	r11, r9
 988:	a4 fe       	sbrs	r10, 4
 98a:	0f c0       	rjmp	.+30     	; 0x9aa <vfprintf+0x2f8>
 98c:	fe 01       	movw	r30, r28
 98e:	e8 0d       	add	r30, r8
 990:	f1 1d       	adc	r31, r1
 992:	80 81       	ld	r24, Z
 994:	80 33       	cpi	r24, 0x30	; 48
 996:	21 f4       	brne	.+8      	; 0x9a0 <vfprintf+0x2ee>
 998:	9a 2d       	mov	r25, r10
 99a:	99 7e       	andi	r25, 0xE9	; 233
 99c:	a9 2e       	mov	r10, r25
 99e:	09 c0       	rjmp	.+18     	; 0x9b2 <vfprintf+0x300>
 9a0:	a2 fe       	sbrs	r10, 2
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <vfprintf+0x2fe>
 9a4:	b3 94       	inc	r11
 9a6:	b3 94       	inc	r11
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <vfprintf+0x300>
 9aa:	8a 2d       	mov	r24, r10
 9ac:	86 78       	andi	r24, 0x86	; 134
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <vfprintf+0x300>
 9b0:	b3 94       	inc	r11
 9b2:	a3 fc       	sbrc	r10, 3
 9b4:	11 c0       	rjmp	.+34     	; 0x9d8 <vfprintf+0x326>
 9b6:	a0 fe       	sbrs	r10, 0
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <vfprintf+0x314>
 9ba:	b2 14       	cp	r11, r2
 9bc:	88 f4       	brcc	.+34     	; 0x9e0 <vfprintf+0x32e>
 9be:	28 0c       	add	r2, r8
 9c0:	92 2c       	mov	r9, r2
 9c2:	9b 18       	sub	r9, r11
 9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <vfprintf+0x330>
 9c6:	b2 14       	cp	r11, r2
 9c8:	60 f4       	brcc	.+24     	; 0x9e2 <vfprintf+0x330>
 9ca:	b6 01       	movw	r22, r12
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 9d4:	b3 94       	inc	r11
 9d6:	f7 cf       	rjmp	.-18     	; 0x9c6 <vfprintf+0x314>
 9d8:	b2 14       	cp	r11, r2
 9da:	18 f4       	brcc	.+6      	; 0x9e2 <vfprintf+0x330>
 9dc:	2b 18       	sub	r2, r11
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <vfprintf+0x332>
 9e0:	98 2c       	mov	r9, r8
 9e2:	21 2c       	mov	r2, r1
 9e4:	a4 fe       	sbrs	r10, 4
 9e6:	10 c0       	rjmp	.+32     	; 0xa08 <vfprintf+0x356>
 9e8:	b6 01       	movw	r22, r12
 9ea:	80 e3       	ldi	r24, 0x30	; 48
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 9f2:	a2 fe       	sbrs	r10, 2
 9f4:	17 c0       	rjmp	.+46     	; 0xa24 <vfprintf+0x372>
 9f6:	a1 fc       	sbrc	r10, 1
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <vfprintf+0x34e>
 9fa:	88 e7       	ldi	r24, 0x78	; 120
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <vfprintf+0x352>
 a00:	88 e5       	ldi	r24, 0x58	; 88
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	b6 01       	movw	r22, r12
 a06:	0c c0       	rjmp	.+24     	; 0xa20 <vfprintf+0x36e>
 a08:	8a 2d       	mov	r24, r10
 a0a:	86 78       	andi	r24, 0x86	; 134
 a0c:	59 f0       	breq	.+22     	; 0xa24 <vfprintf+0x372>
 a0e:	a1 fe       	sbrs	r10, 1
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <vfprintf+0x364>
 a12:	8b e2       	ldi	r24, 0x2B	; 43
 a14:	01 c0       	rjmp	.+2      	; 0xa18 <vfprintf+0x366>
 a16:	80 e2       	ldi	r24, 0x20	; 32
 a18:	a7 fc       	sbrc	r10, 7
 a1a:	8d e2       	ldi	r24, 0x2D	; 45
 a1c:	b6 01       	movw	r22, r12
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 a24:	89 14       	cp	r8, r9
 a26:	38 f4       	brcc	.+14     	; 0xa36 <vfprintf+0x384>
 a28:	b6 01       	movw	r22, r12
 a2a:	80 e3       	ldi	r24, 0x30	; 48
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 a32:	9a 94       	dec	r9
 a34:	f7 cf       	rjmp	.-18     	; 0xa24 <vfprintf+0x372>
 a36:	8a 94       	dec	r8
 a38:	f3 01       	movw	r30, r6
 a3a:	e8 0d       	add	r30, r8
 a3c:	f1 1d       	adc	r31, r1
 a3e:	80 81       	ld	r24, Z
 a40:	b6 01       	movw	r22, r12
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 a48:	81 10       	cpse	r8, r1
 a4a:	f5 cf       	rjmp	.-22     	; 0xa36 <vfprintf+0x384>
 a4c:	22 20       	and	r2, r2
 a4e:	09 f4       	brne	.+2      	; 0xa52 <vfprintf+0x3a0>
 a50:	42 ce       	rjmp	.-892    	; 0x6d6 <vfprintf+0x24>
 a52:	b6 01       	movw	r22, r12
 a54:	80 e2       	ldi	r24, 0x20	; 32
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 94 06 	call	0xd28	; 0xd28 <fputc>
 a5c:	2a 94       	dec	r2
 a5e:	f6 cf       	rjmp	.-20     	; 0xa4c <vfprintf+0x39a>
 a60:	f6 01       	movw	r30, r12
 a62:	86 81       	ldd	r24, Z+6	; 0x06
 a64:	97 81       	ldd	r25, Z+7	; 0x07
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <vfprintf+0x3ba>
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	9f ef       	ldi	r25, 0xFF	; 255
 a6c:	2b 96       	adiw	r28, 0x0b	; 11
 a6e:	e2 e1       	ldi	r30, 0x12	; 18
 a70:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__epilogue_restores__>

00000a74 <calloc>:
 a74:	0f 93       	push	r16
 a76:	1f 93       	push	r17
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	86 9f       	mul	r24, r22
 a7e:	80 01       	movw	r16, r0
 a80:	87 9f       	mul	r24, r23
 a82:	10 0d       	add	r17, r0
 a84:	96 9f       	mul	r25, r22
 a86:	10 0d       	add	r17, r0
 a88:	11 24       	eor	r1, r1
 a8a:	c8 01       	movw	r24, r16
 a8c:	0e 94 56 05 	call	0xaac	; 0xaac <malloc>
 a90:	ec 01       	movw	r28, r24
 a92:	00 97       	sbiw	r24, 0x00	; 0
 a94:	29 f0       	breq	.+10     	; 0xaa0 <calloc+0x2c>
 a96:	a8 01       	movw	r20, r16
 a98:	60 e0       	ldi	r22, 0x00	; 0
 a9a:	70 e0       	ldi	r23, 0x00	; 0
 a9c:	0e 94 82 06 	call	0xd04	; 0xd04 <memset>
 aa0:	ce 01       	movw	r24, r28
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	08 95       	ret

00000aac <malloc>:
 aac:	0f 93       	push	r16
 aae:	1f 93       	push	r17
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	82 30       	cpi	r24, 0x02	; 2
 ab6:	91 05       	cpc	r25, r1
 ab8:	10 f4       	brcc	.+4      	; 0xabe <malloc+0x12>
 aba:	82 e0       	ldi	r24, 0x02	; 2
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <__flp>
 ac2:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <__flp+0x1>
 ac6:	20 e0       	ldi	r18, 0x00	; 0
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	a0 e0       	ldi	r26, 0x00	; 0
 acc:	b0 e0       	ldi	r27, 0x00	; 0
 ace:	30 97       	sbiw	r30, 0x00	; 0
 ad0:	19 f1       	breq	.+70     	; 0xb18 <malloc+0x6c>
 ad2:	40 81       	ld	r20, Z
 ad4:	51 81       	ldd	r21, Z+1	; 0x01
 ad6:	02 81       	ldd	r16, Z+2	; 0x02
 ad8:	13 81       	ldd	r17, Z+3	; 0x03
 ada:	48 17       	cp	r20, r24
 adc:	59 07       	cpc	r21, r25
 ade:	c8 f0       	brcs	.+50     	; 0xb12 <malloc+0x66>
 ae0:	84 17       	cp	r24, r20
 ae2:	95 07       	cpc	r25, r21
 ae4:	69 f4       	brne	.+26     	; 0xb00 <malloc+0x54>
 ae6:	10 97       	sbiw	r26, 0x00	; 0
 ae8:	31 f0       	breq	.+12     	; 0xaf6 <malloc+0x4a>
 aea:	12 96       	adiw	r26, 0x02	; 2
 aec:	0c 93       	st	X, r16
 aee:	12 97       	sbiw	r26, 0x02	; 2
 af0:	13 96       	adiw	r26, 0x03	; 3
 af2:	1c 93       	st	X, r17
 af4:	27 c0       	rjmp	.+78     	; 0xb44 <malloc+0x98>
 af6:	00 93 2c 02 	sts	0x022C, r16	; 0x80022c <__flp>
 afa:	10 93 2d 02 	sts	0x022D, r17	; 0x80022d <__flp+0x1>
 afe:	22 c0       	rjmp	.+68     	; 0xb44 <malloc+0x98>
 b00:	21 15       	cp	r18, r1
 b02:	31 05       	cpc	r19, r1
 b04:	19 f0       	breq	.+6      	; 0xb0c <malloc+0x60>
 b06:	42 17       	cp	r20, r18
 b08:	53 07       	cpc	r21, r19
 b0a:	18 f4       	brcc	.+6      	; 0xb12 <malloc+0x66>
 b0c:	9a 01       	movw	r18, r20
 b0e:	bd 01       	movw	r22, r26
 b10:	ef 01       	movw	r28, r30
 b12:	df 01       	movw	r26, r30
 b14:	f8 01       	movw	r30, r16
 b16:	db cf       	rjmp	.-74     	; 0xace <malloc+0x22>
 b18:	21 15       	cp	r18, r1
 b1a:	31 05       	cpc	r19, r1
 b1c:	f9 f0       	breq	.+62     	; 0xb5c <malloc+0xb0>
 b1e:	28 1b       	sub	r18, r24
 b20:	39 0b       	sbc	r19, r25
 b22:	24 30       	cpi	r18, 0x04	; 4
 b24:	31 05       	cpc	r19, r1
 b26:	80 f4       	brcc	.+32     	; 0xb48 <malloc+0x9c>
 b28:	8a 81       	ldd	r24, Y+2	; 0x02
 b2a:	9b 81       	ldd	r25, Y+3	; 0x03
 b2c:	61 15       	cp	r22, r1
 b2e:	71 05       	cpc	r23, r1
 b30:	21 f0       	breq	.+8      	; 0xb3a <malloc+0x8e>
 b32:	fb 01       	movw	r30, r22
 b34:	93 83       	std	Z+3, r25	; 0x03
 b36:	82 83       	std	Z+2, r24	; 0x02
 b38:	04 c0       	rjmp	.+8      	; 0xb42 <malloc+0x96>
 b3a:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <__flp+0x1>
 b3e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__flp>
 b42:	fe 01       	movw	r30, r28
 b44:	32 96       	adiw	r30, 0x02	; 2
 b46:	44 c0       	rjmp	.+136    	; 0xbd0 <malloc+0x124>
 b48:	fe 01       	movw	r30, r28
 b4a:	e2 0f       	add	r30, r18
 b4c:	f3 1f       	adc	r31, r19
 b4e:	81 93       	st	Z+, r24
 b50:	91 93       	st	Z+, r25
 b52:	22 50       	subi	r18, 0x02	; 2
 b54:	31 09       	sbc	r19, r1
 b56:	39 83       	std	Y+1, r19	; 0x01
 b58:	28 83       	st	Y, r18
 b5a:	3a c0       	rjmp	.+116    	; 0xbd0 <malloc+0x124>
 b5c:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <__brkval>
 b60:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <__brkval+0x1>
 b64:	23 2b       	or	r18, r19
 b66:	41 f4       	brne	.+16     	; 0xb78 <malloc+0xcc>
 b68:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 b6c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 b70:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <__brkval+0x1>
 b74:	20 93 2a 02 	sts	0x022A, r18	; 0x80022a <__brkval>
 b78:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 b7c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 b80:	21 15       	cp	r18, r1
 b82:	31 05       	cpc	r19, r1
 b84:	41 f4       	brne	.+16     	; 0xb96 <malloc+0xea>
 b86:	2d b7       	in	r18, 0x3d	; 61
 b88:	3e b7       	in	r19, 0x3e	; 62
 b8a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 b8e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 b92:	24 1b       	sub	r18, r20
 b94:	35 0b       	sbc	r19, r21
 b96:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <__brkval>
 b9a:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <__brkval+0x1>
 b9e:	e2 17       	cp	r30, r18
 ba0:	f3 07       	cpc	r31, r19
 ba2:	a0 f4       	brcc	.+40     	; 0xbcc <malloc+0x120>
 ba4:	2e 1b       	sub	r18, r30
 ba6:	3f 0b       	sbc	r19, r31
 ba8:	28 17       	cp	r18, r24
 baa:	39 07       	cpc	r19, r25
 bac:	78 f0       	brcs	.+30     	; 0xbcc <malloc+0x120>
 bae:	ac 01       	movw	r20, r24
 bb0:	4e 5f       	subi	r20, 0xFE	; 254
 bb2:	5f 4f       	sbci	r21, 0xFF	; 255
 bb4:	24 17       	cp	r18, r20
 bb6:	35 07       	cpc	r19, r21
 bb8:	48 f0       	brcs	.+18     	; 0xbcc <malloc+0x120>
 bba:	4e 0f       	add	r20, r30
 bbc:	5f 1f       	adc	r21, r31
 bbe:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <__brkval+0x1>
 bc2:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <__brkval>
 bc6:	81 93       	st	Z+, r24
 bc8:	91 93       	st	Z+, r25
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <malloc+0x124>
 bcc:	e0 e0       	ldi	r30, 0x00	; 0
 bce:	f0 e0       	ldi	r31, 0x00	; 0
 bd0:	cf 01       	movw	r24, r30
 bd2:	df 91       	pop	r29
 bd4:	cf 91       	pop	r28
 bd6:	1f 91       	pop	r17
 bd8:	0f 91       	pop	r16
 bda:	08 95       	ret

00000bdc <free>:
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	00 97       	sbiw	r24, 0x00	; 0
 be2:	09 f4       	brne	.+2      	; 0xbe6 <free+0xa>
 be4:	81 c0       	rjmp	.+258    	; 0xce8 <free+0x10c>
 be6:	fc 01       	movw	r30, r24
 be8:	32 97       	sbiw	r30, 0x02	; 2
 bea:	13 82       	std	Z+3, r1	; 0x03
 bec:	12 82       	std	Z+2, r1	; 0x02
 bee:	a0 91 2c 02 	lds	r26, 0x022C	; 0x80022c <__flp>
 bf2:	b0 91 2d 02 	lds	r27, 0x022D	; 0x80022d <__flp+0x1>
 bf6:	10 97       	sbiw	r26, 0x00	; 0
 bf8:	81 f4       	brne	.+32     	; 0xc1a <free+0x3e>
 bfa:	20 81       	ld	r18, Z
 bfc:	31 81       	ldd	r19, Z+1	; 0x01
 bfe:	82 0f       	add	r24, r18
 c00:	93 1f       	adc	r25, r19
 c02:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <__brkval>
 c06:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <__brkval+0x1>
 c0a:	28 17       	cp	r18, r24
 c0c:	39 07       	cpc	r19, r25
 c0e:	51 f5       	brne	.+84     	; 0xc64 <free+0x88>
 c10:	f0 93 2b 02 	sts	0x022B, r31	; 0x80022b <__brkval+0x1>
 c14:	e0 93 2a 02 	sts	0x022A, r30	; 0x80022a <__brkval>
 c18:	67 c0       	rjmp	.+206    	; 0xce8 <free+0x10c>
 c1a:	ed 01       	movw	r28, r26
 c1c:	20 e0       	ldi	r18, 0x00	; 0
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	ce 17       	cp	r28, r30
 c22:	df 07       	cpc	r29, r31
 c24:	40 f4       	brcc	.+16     	; 0xc36 <free+0x5a>
 c26:	4a 81       	ldd	r20, Y+2	; 0x02
 c28:	5b 81       	ldd	r21, Y+3	; 0x03
 c2a:	9e 01       	movw	r18, r28
 c2c:	41 15       	cp	r20, r1
 c2e:	51 05       	cpc	r21, r1
 c30:	f1 f0       	breq	.+60     	; 0xc6e <free+0x92>
 c32:	ea 01       	movw	r28, r20
 c34:	f5 cf       	rjmp	.-22     	; 0xc20 <free+0x44>
 c36:	d3 83       	std	Z+3, r29	; 0x03
 c38:	c2 83       	std	Z+2, r28	; 0x02
 c3a:	40 81       	ld	r20, Z
 c3c:	51 81       	ldd	r21, Z+1	; 0x01
 c3e:	84 0f       	add	r24, r20
 c40:	95 1f       	adc	r25, r21
 c42:	c8 17       	cp	r28, r24
 c44:	d9 07       	cpc	r29, r25
 c46:	59 f4       	brne	.+22     	; 0xc5e <free+0x82>
 c48:	88 81       	ld	r24, Y
 c4a:	99 81       	ldd	r25, Y+1	; 0x01
 c4c:	84 0f       	add	r24, r20
 c4e:	95 1f       	adc	r25, r21
 c50:	02 96       	adiw	r24, 0x02	; 2
 c52:	91 83       	std	Z+1, r25	; 0x01
 c54:	80 83       	st	Z, r24
 c56:	8a 81       	ldd	r24, Y+2	; 0x02
 c58:	9b 81       	ldd	r25, Y+3	; 0x03
 c5a:	93 83       	std	Z+3, r25	; 0x03
 c5c:	82 83       	std	Z+2, r24	; 0x02
 c5e:	21 15       	cp	r18, r1
 c60:	31 05       	cpc	r19, r1
 c62:	29 f4       	brne	.+10     	; 0xc6e <free+0x92>
 c64:	f0 93 2d 02 	sts	0x022D, r31	; 0x80022d <__flp+0x1>
 c68:	e0 93 2c 02 	sts	0x022C, r30	; 0x80022c <__flp>
 c6c:	3d c0       	rjmp	.+122    	; 0xce8 <free+0x10c>
 c6e:	e9 01       	movw	r28, r18
 c70:	fb 83       	std	Y+3, r31	; 0x03
 c72:	ea 83       	std	Y+2, r30	; 0x02
 c74:	49 91       	ld	r20, Y+
 c76:	59 91       	ld	r21, Y+
 c78:	c4 0f       	add	r28, r20
 c7a:	d5 1f       	adc	r29, r21
 c7c:	ec 17       	cp	r30, r28
 c7e:	fd 07       	cpc	r31, r29
 c80:	61 f4       	brne	.+24     	; 0xc9a <free+0xbe>
 c82:	80 81       	ld	r24, Z
 c84:	91 81       	ldd	r25, Z+1	; 0x01
 c86:	84 0f       	add	r24, r20
 c88:	95 1f       	adc	r25, r21
 c8a:	02 96       	adiw	r24, 0x02	; 2
 c8c:	e9 01       	movw	r28, r18
 c8e:	99 83       	std	Y+1, r25	; 0x01
 c90:	88 83       	st	Y, r24
 c92:	82 81       	ldd	r24, Z+2	; 0x02
 c94:	93 81       	ldd	r25, Z+3	; 0x03
 c96:	9b 83       	std	Y+3, r25	; 0x03
 c98:	8a 83       	std	Y+2, r24	; 0x02
 c9a:	e0 e0       	ldi	r30, 0x00	; 0
 c9c:	f0 e0       	ldi	r31, 0x00	; 0
 c9e:	12 96       	adiw	r26, 0x02	; 2
 ca0:	8d 91       	ld	r24, X+
 ca2:	9c 91       	ld	r25, X
 ca4:	13 97       	sbiw	r26, 0x03	; 3
 ca6:	00 97       	sbiw	r24, 0x00	; 0
 ca8:	19 f0       	breq	.+6      	; 0xcb0 <free+0xd4>
 caa:	fd 01       	movw	r30, r26
 cac:	dc 01       	movw	r26, r24
 cae:	f7 cf       	rjmp	.-18     	; 0xc9e <free+0xc2>
 cb0:	8d 91       	ld	r24, X+
 cb2:	9c 91       	ld	r25, X
 cb4:	11 97       	sbiw	r26, 0x01	; 1
 cb6:	9d 01       	movw	r18, r26
 cb8:	2e 5f       	subi	r18, 0xFE	; 254
 cba:	3f 4f       	sbci	r19, 0xFF	; 255
 cbc:	82 0f       	add	r24, r18
 cbe:	93 1f       	adc	r25, r19
 cc0:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <__brkval>
 cc4:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <__brkval+0x1>
 cc8:	28 17       	cp	r18, r24
 cca:	39 07       	cpc	r19, r25
 ccc:	69 f4       	brne	.+26     	; 0xce8 <free+0x10c>
 cce:	30 97       	sbiw	r30, 0x00	; 0
 cd0:	29 f4       	brne	.+10     	; 0xcdc <free+0x100>
 cd2:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <__flp+0x1>
 cd6:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <__flp>
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <free+0x104>
 cdc:	13 82       	std	Z+3, r1	; 0x03
 cde:	12 82       	std	Z+2, r1	; 0x02
 ce0:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <__brkval+0x1>
 ce4:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <__brkval>
 ce8:	df 91       	pop	r29
 cea:	cf 91       	pop	r28
 cec:	08 95       	ret

00000cee <strnlen_P>:
 cee:	fc 01       	movw	r30, r24
 cf0:	05 90       	lpm	r0, Z+
 cf2:	61 50       	subi	r22, 0x01	; 1
 cf4:	70 40       	sbci	r23, 0x00	; 0
 cf6:	01 10       	cpse	r0, r1
 cf8:	d8 f7       	brcc	.-10     	; 0xcf0 <strnlen_P+0x2>
 cfa:	80 95       	com	r24
 cfc:	90 95       	com	r25
 cfe:	8e 0f       	add	r24, r30
 d00:	9f 1f       	adc	r25, r31
 d02:	08 95       	ret

00000d04 <memset>:
 d04:	dc 01       	movw	r26, r24
 d06:	01 c0       	rjmp	.+2      	; 0xd0a <memset+0x6>
 d08:	6d 93       	st	X+, r22
 d0a:	41 50       	subi	r20, 0x01	; 1
 d0c:	50 40       	sbci	r21, 0x00	; 0
 d0e:	e0 f7       	brcc	.-8      	; 0xd08 <memset+0x4>
 d10:	08 95       	ret

00000d12 <strnlen>:
 d12:	fc 01       	movw	r30, r24
 d14:	61 50       	subi	r22, 0x01	; 1
 d16:	70 40       	sbci	r23, 0x00	; 0
 d18:	01 90       	ld	r0, Z+
 d1a:	01 10       	cpse	r0, r1
 d1c:	d8 f7       	brcc	.-10     	; 0xd14 <strnlen+0x2>
 d1e:	80 95       	com	r24
 d20:	90 95       	com	r25
 d22:	8e 0f       	add	r24, r30
 d24:	9f 1f       	adc	r25, r31
 d26:	08 95       	ret

00000d28 <fputc>:
 d28:	0f 93       	push	r16
 d2a:	1f 93       	push	r17
 d2c:	cf 93       	push	r28
 d2e:	df 93       	push	r29
 d30:	fb 01       	movw	r30, r22
 d32:	23 81       	ldd	r18, Z+3	; 0x03
 d34:	21 fd       	sbrc	r18, 1
 d36:	03 c0       	rjmp	.+6      	; 0xd3e <fputc+0x16>
 d38:	8f ef       	ldi	r24, 0xFF	; 255
 d3a:	9f ef       	ldi	r25, 0xFF	; 255
 d3c:	2c c0       	rjmp	.+88     	; 0xd96 <fputc+0x6e>
 d3e:	22 ff       	sbrs	r18, 2
 d40:	16 c0       	rjmp	.+44     	; 0xd6e <fputc+0x46>
 d42:	46 81       	ldd	r20, Z+6	; 0x06
 d44:	57 81       	ldd	r21, Z+7	; 0x07
 d46:	24 81       	ldd	r18, Z+4	; 0x04
 d48:	35 81       	ldd	r19, Z+5	; 0x05
 d4a:	42 17       	cp	r20, r18
 d4c:	53 07       	cpc	r21, r19
 d4e:	44 f4       	brge	.+16     	; 0xd60 <fputc+0x38>
 d50:	a0 81       	ld	r26, Z
 d52:	b1 81       	ldd	r27, Z+1	; 0x01
 d54:	9d 01       	movw	r18, r26
 d56:	2f 5f       	subi	r18, 0xFF	; 255
 d58:	3f 4f       	sbci	r19, 0xFF	; 255
 d5a:	31 83       	std	Z+1, r19	; 0x01
 d5c:	20 83       	st	Z, r18
 d5e:	8c 93       	st	X, r24
 d60:	26 81       	ldd	r18, Z+6	; 0x06
 d62:	37 81       	ldd	r19, Z+7	; 0x07
 d64:	2f 5f       	subi	r18, 0xFF	; 255
 d66:	3f 4f       	sbci	r19, 0xFF	; 255
 d68:	37 83       	std	Z+7, r19	; 0x07
 d6a:	26 83       	std	Z+6, r18	; 0x06
 d6c:	14 c0       	rjmp	.+40     	; 0xd96 <fputc+0x6e>
 d6e:	8b 01       	movw	r16, r22
 d70:	ec 01       	movw	r28, r24
 d72:	fb 01       	movw	r30, r22
 d74:	00 84       	ldd	r0, Z+8	; 0x08
 d76:	f1 85       	ldd	r31, Z+9	; 0x09
 d78:	e0 2d       	mov	r30, r0
 d7a:	09 95       	icall
 d7c:	89 2b       	or	r24, r25
 d7e:	e1 f6       	brne	.-72     	; 0xd38 <fputc+0x10>
 d80:	d8 01       	movw	r26, r16
 d82:	16 96       	adiw	r26, 0x06	; 6
 d84:	8d 91       	ld	r24, X+
 d86:	9c 91       	ld	r25, X
 d88:	17 97       	sbiw	r26, 0x07	; 7
 d8a:	01 96       	adiw	r24, 0x01	; 1
 d8c:	17 96       	adiw	r26, 0x07	; 7
 d8e:	9c 93       	st	X, r25
 d90:	8e 93       	st	-X, r24
 d92:	16 97       	sbiw	r26, 0x06	; 6
 d94:	ce 01       	movw	r24, r28
 d96:	df 91       	pop	r29
 d98:	cf 91       	pop	r28
 d9a:	1f 91       	pop	r17
 d9c:	0f 91       	pop	r16
 d9e:	08 95       	ret

00000da0 <__ultoa_invert>:
 da0:	fa 01       	movw	r30, r20
 da2:	aa 27       	eor	r26, r26
 da4:	28 30       	cpi	r18, 0x08	; 8
 da6:	51 f1       	breq	.+84     	; 0xdfc <__ultoa_invert+0x5c>
 da8:	20 31       	cpi	r18, 0x10	; 16
 daa:	81 f1       	breq	.+96     	; 0xe0c <__ultoa_invert+0x6c>
 dac:	e8 94       	clt
 dae:	6f 93       	push	r22
 db0:	6e 7f       	andi	r22, 0xFE	; 254
 db2:	6e 5f       	subi	r22, 0xFE	; 254
 db4:	7f 4f       	sbci	r23, 0xFF	; 255
 db6:	8f 4f       	sbci	r24, 0xFF	; 255
 db8:	9f 4f       	sbci	r25, 0xFF	; 255
 dba:	af 4f       	sbci	r26, 0xFF	; 255
 dbc:	b1 e0       	ldi	r27, 0x01	; 1
 dbe:	3e d0       	rcall	.+124    	; 0xe3c <__ultoa_invert+0x9c>
 dc0:	b4 e0       	ldi	r27, 0x04	; 4
 dc2:	3c d0       	rcall	.+120    	; 0xe3c <__ultoa_invert+0x9c>
 dc4:	67 0f       	add	r22, r23
 dc6:	78 1f       	adc	r23, r24
 dc8:	89 1f       	adc	r24, r25
 dca:	9a 1f       	adc	r25, r26
 dcc:	a1 1d       	adc	r26, r1
 dce:	68 0f       	add	r22, r24
 dd0:	79 1f       	adc	r23, r25
 dd2:	8a 1f       	adc	r24, r26
 dd4:	91 1d       	adc	r25, r1
 dd6:	a1 1d       	adc	r26, r1
 dd8:	6a 0f       	add	r22, r26
 dda:	71 1d       	adc	r23, r1
 ddc:	81 1d       	adc	r24, r1
 dde:	91 1d       	adc	r25, r1
 de0:	a1 1d       	adc	r26, r1
 de2:	20 d0       	rcall	.+64     	; 0xe24 <__ultoa_invert+0x84>
 de4:	09 f4       	brne	.+2      	; 0xde8 <__ultoa_invert+0x48>
 de6:	68 94       	set
 de8:	3f 91       	pop	r19
 dea:	2a e0       	ldi	r18, 0x0A	; 10
 dec:	26 9f       	mul	r18, r22
 dee:	11 24       	eor	r1, r1
 df0:	30 19       	sub	r19, r0
 df2:	30 5d       	subi	r19, 0xD0	; 208
 df4:	31 93       	st	Z+, r19
 df6:	de f6       	brtc	.-74     	; 0xdae <__ultoa_invert+0xe>
 df8:	cf 01       	movw	r24, r30
 dfa:	08 95       	ret
 dfc:	46 2f       	mov	r20, r22
 dfe:	47 70       	andi	r20, 0x07	; 7
 e00:	40 5d       	subi	r20, 0xD0	; 208
 e02:	41 93       	st	Z+, r20
 e04:	b3 e0       	ldi	r27, 0x03	; 3
 e06:	0f d0       	rcall	.+30     	; 0xe26 <__ultoa_invert+0x86>
 e08:	c9 f7       	brne	.-14     	; 0xdfc <__ultoa_invert+0x5c>
 e0a:	f6 cf       	rjmp	.-20     	; 0xdf8 <__ultoa_invert+0x58>
 e0c:	46 2f       	mov	r20, r22
 e0e:	4f 70       	andi	r20, 0x0F	; 15
 e10:	40 5d       	subi	r20, 0xD0	; 208
 e12:	4a 33       	cpi	r20, 0x3A	; 58
 e14:	18 f0       	brcs	.+6      	; 0xe1c <__ultoa_invert+0x7c>
 e16:	49 5d       	subi	r20, 0xD9	; 217
 e18:	31 fd       	sbrc	r19, 1
 e1a:	40 52       	subi	r20, 0x20	; 32
 e1c:	41 93       	st	Z+, r20
 e1e:	02 d0       	rcall	.+4      	; 0xe24 <__ultoa_invert+0x84>
 e20:	a9 f7       	brne	.-22     	; 0xe0c <__ultoa_invert+0x6c>
 e22:	ea cf       	rjmp	.-44     	; 0xdf8 <__ultoa_invert+0x58>
 e24:	b4 e0       	ldi	r27, 0x04	; 4
 e26:	a6 95       	lsr	r26
 e28:	97 95       	ror	r25
 e2a:	87 95       	ror	r24
 e2c:	77 95       	ror	r23
 e2e:	67 95       	ror	r22
 e30:	ba 95       	dec	r27
 e32:	c9 f7       	brne	.-14     	; 0xe26 <__ultoa_invert+0x86>
 e34:	00 97       	sbiw	r24, 0x00	; 0
 e36:	61 05       	cpc	r22, r1
 e38:	71 05       	cpc	r23, r1
 e3a:	08 95       	ret
 e3c:	9b 01       	movw	r18, r22
 e3e:	ac 01       	movw	r20, r24
 e40:	0a 2e       	mov	r0, r26
 e42:	06 94       	lsr	r0
 e44:	57 95       	ror	r21
 e46:	47 95       	ror	r20
 e48:	37 95       	ror	r19
 e4a:	27 95       	ror	r18
 e4c:	ba 95       	dec	r27
 e4e:	c9 f7       	brne	.-14     	; 0xe42 <__ultoa_invert+0xa2>
 e50:	62 0f       	add	r22, r18
 e52:	73 1f       	adc	r23, r19
 e54:	84 1f       	adc	r24, r20
 e56:	95 1f       	adc	r25, r21
 e58:	a0 1d       	adc	r26, r0
 e5a:	08 95       	ret

00000e5c <__divmodsi4>:
 e5c:	05 2e       	mov	r0, r21
 e5e:	97 fb       	bst	r25, 7
 e60:	1e f4       	brtc	.+6      	; 0xe68 <__divmodsi4+0xc>
 e62:	00 94       	com	r0
 e64:	0e 94 45 07 	call	0xe8a	; 0xe8a <__negsi2>
 e68:	57 fd       	sbrc	r21, 7
 e6a:	07 d0       	rcall	.+14     	; 0xe7a <__divmodsi4_neg2>
 e6c:	0e 94 97 07 	call	0xf2e	; 0xf2e <__udivmodsi4>
 e70:	07 fc       	sbrc	r0, 7
 e72:	03 d0       	rcall	.+6      	; 0xe7a <__divmodsi4_neg2>
 e74:	4e f4       	brtc	.+18     	; 0xe88 <__divmodsi4_exit>
 e76:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__negsi2>

00000e7a <__divmodsi4_neg2>:
 e7a:	50 95       	com	r21
 e7c:	40 95       	com	r20
 e7e:	30 95       	com	r19
 e80:	21 95       	neg	r18
 e82:	3f 4f       	sbci	r19, 0xFF	; 255
 e84:	4f 4f       	sbci	r20, 0xFF	; 255
 e86:	5f 4f       	sbci	r21, 0xFF	; 255

00000e88 <__divmodsi4_exit>:
 e88:	08 95       	ret

00000e8a <__negsi2>:
 e8a:	90 95       	com	r25
 e8c:	80 95       	com	r24
 e8e:	70 95       	com	r23
 e90:	61 95       	neg	r22
 e92:	7f 4f       	sbci	r23, 0xFF	; 255
 e94:	8f 4f       	sbci	r24, 0xFF	; 255
 e96:	9f 4f       	sbci	r25, 0xFF	; 255
 e98:	08 95       	ret

00000e9a <__muluhisi3>:
 e9a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__umulhisi3>
 e9e:	a5 9f       	mul	r26, r21
 ea0:	90 0d       	add	r25, r0
 ea2:	b4 9f       	mul	r27, r20
 ea4:	90 0d       	add	r25, r0
 ea6:	a4 9f       	mul	r26, r20
 ea8:	80 0d       	add	r24, r0
 eaa:	91 1d       	adc	r25, r1
 eac:	11 24       	eor	r1, r1
 eae:	08 95       	ret

00000eb0 <__mulshisi3>:
 eb0:	b7 ff       	sbrs	r27, 7
 eb2:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__muluhisi3>

00000eb6 <__mulohisi3>:
 eb6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__muluhisi3>
 eba:	82 1b       	sub	r24, r18
 ebc:	93 0b       	sbc	r25, r19
 ebe:	08 95       	ret

00000ec0 <__prologue_saves__>:
 ec0:	2f 92       	push	r2
 ec2:	3f 92       	push	r3
 ec4:	4f 92       	push	r4
 ec6:	5f 92       	push	r5
 ec8:	6f 92       	push	r6
 eca:	7f 92       	push	r7
 ecc:	8f 92       	push	r8
 ece:	9f 92       	push	r9
 ed0:	af 92       	push	r10
 ed2:	bf 92       	push	r11
 ed4:	cf 92       	push	r12
 ed6:	df 92       	push	r13
 ed8:	ef 92       	push	r14
 eda:	ff 92       	push	r15
 edc:	0f 93       	push	r16
 ede:	1f 93       	push	r17
 ee0:	cf 93       	push	r28
 ee2:	df 93       	push	r29
 ee4:	cd b7       	in	r28, 0x3d	; 61
 ee6:	de b7       	in	r29, 0x3e	; 62
 ee8:	ca 1b       	sub	r28, r26
 eea:	db 0b       	sbc	r29, r27
 eec:	0f b6       	in	r0, 0x3f	; 63
 eee:	f8 94       	cli
 ef0:	de bf       	out	0x3e, r29	; 62
 ef2:	0f be       	out	0x3f, r0	; 63
 ef4:	cd bf       	out	0x3d, r28	; 61
 ef6:	09 94       	ijmp

00000ef8 <__epilogue_restores__>:
 ef8:	2a 88       	ldd	r2, Y+18	; 0x12
 efa:	39 88       	ldd	r3, Y+17	; 0x11
 efc:	48 88       	ldd	r4, Y+16	; 0x10
 efe:	5f 84       	ldd	r5, Y+15	; 0x0f
 f00:	6e 84       	ldd	r6, Y+14	; 0x0e
 f02:	7d 84       	ldd	r7, Y+13	; 0x0d
 f04:	8c 84       	ldd	r8, Y+12	; 0x0c
 f06:	9b 84       	ldd	r9, Y+11	; 0x0b
 f08:	aa 84       	ldd	r10, Y+10	; 0x0a
 f0a:	b9 84       	ldd	r11, Y+9	; 0x09
 f0c:	c8 84       	ldd	r12, Y+8	; 0x08
 f0e:	df 80       	ldd	r13, Y+7	; 0x07
 f10:	ee 80       	ldd	r14, Y+6	; 0x06
 f12:	fd 80       	ldd	r15, Y+5	; 0x05
 f14:	0c 81       	ldd	r16, Y+4	; 0x04
 f16:	1b 81       	ldd	r17, Y+3	; 0x03
 f18:	aa 81       	ldd	r26, Y+2	; 0x02
 f1a:	b9 81       	ldd	r27, Y+1	; 0x01
 f1c:	ce 0f       	add	r28, r30
 f1e:	d1 1d       	adc	r29, r1
 f20:	0f b6       	in	r0, 0x3f	; 63
 f22:	f8 94       	cli
 f24:	de bf       	out	0x3e, r29	; 62
 f26:	0f be       	out	0x3f, r0	; 63
 f28:	cd bf       	out	0x3d, r28	; 61
 f2a:	ed 01       	movw	r28, r26
 f2c:	08 95       	ret

00000f2e <__udivmodsi4>:
 f2e:	a1 e2       	ldi	r26, 0x21	; 33
 f30:	1a 2e       	mov	r1, r26
 f32:	aa 1b       	sub	r26, r26
 f34:	bb 1b       	sub	r27, r27
 f36:	fd 01       	movw	r30, r26
 f38:	0d c0       	rjmp	.+26     	; 0xf54 <__udivmodsi4_ep>

00000f3a <__udivmodsi4_loop>:
 f3a:	aa 1f       	adc	r26, r26
 f3c:	bb 1f       	adc	r27, r27
 f3e:	ee 1f       	adc	r30, r30
 f40:	ff 1f       	adc	r31, r31
 f42:	a2 17       	cp	r26, r18
 f44:	b3 07       	cpc	r27, r19
 f46:	e4 07       	cpc	r30, r20
 f48:	f5 07       	cpc	r31, r21
 f4a:	20 f0       	brcs	.+8      	; 0xf54 <__udivmodsi4_ep>
 f4c:	a2 1b       	sub	r26, r18
 f4e:	b3 0b       	sbc	r27, r19
 f50:	e4 0b       	sbc	r30, r20
 f52:	f5 0b       	sbc	r31, r21

00000f54 <__udivmodsi4_ep>:
 f54:	66 1f       	adc	r22, r22
 f56:	77 1f       	adc	r23, r23
 f58:	88 1f       	adc	r24, r24
 f5a:	99 1f       	adc	r25, r25
 f5c:	1a 94       	dec	r1
 f5e:	69 f7       	brne	.-38     	; 0xf3a <__udivmodsi4_loop>
 f60:	60 95       	com	r22
 f62:	70 95       	com	r23
 f64:	80 95       	com	r24
 f66:	90 95       	com	r25
 f68:	9b 01       	movw	r18, r22
 f6a:	ac 01       	movw	r20, r24
 f6c:	bd 01       	movw	r22, r26
 f6e:	cf 01       	movw	r24, r30
 f70:	08 95       	ret

00000f72 <__umulhisi3>:
 f72:	a2 9f       	mul	r26, r18
 f74:	b0 01       	movw	r22, r0
 f76:	b3 9f       	mul	r27, r19
 f78:	c0 01       	movw	r24, r0
 f7a:	a3 9f       	mul	r26, r19
 f7c:	70 0d       	add	r23, r0
 f7e:	81 1d       	adc	r24, r1
 f80:	11 24       	eor	r1, r1
 f82:	91 1d       	adc	r25, r1
 f84:	b2 9f       	mul	r27, r18
 f86:	70 0d       	add	r23, r0
 f88:	81 1d       	adc	r24, r1
 f8a:	11 24       	eor	r1, r1
 f8c:	91 1d       	adc	r25, r1
 f8e:	08 95       	ret

00000f90 <_exit>:
 f90:	f8 94       	cli

00000f92 <__stop_program>:
 f92:	ff cf       	rjmp	.-2      	; 0xf92 <__stop_program>
